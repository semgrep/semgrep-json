(* Generated by ocaml-tree-sitter. *)
(*
   json grammar

   entrypoint: document
*)

open! Sexplib.Conv
open Tree_sitter_run

type string_content_ = Token.t (* pattern "[^\\\\\"\\n]+" *)

type escape_sequence = Token.t

type semgrep_metavariable = Token.t

type identifier = Token.t

type number = Token.t

type string_content =
  [
      `Str_content_ of string_content_ (*tok*)
    | `Esc_seq of escape_sequence (*tok*)
  ]
    list (* one or more *)

type string_ = [
    `Choice_DQUOT_DQUOT of [
        `DQUOT_DQUOT of (Token.t (* "\"" *) * Token.t (* "\"" *))
      | `DQUOT_str_content_DQUOT of (
            Token.t (* "\"" *) * string_content * Token.t (* "\"" *)
        )
    ]
  | `Semg_meta of semgrep_metavariable (*tok*)
  | `Id of identifier (*tok*)
]

type array_ = (
    Token.t (* "[" *)
  * (value * (Token.t (* "," *) * value) list (* zero or more *)) option
  * Token.t (* "]" *)
)

and object_ = (
    Token.t (* "{" *)
  * (pair * (Token.t (* "," *) * pair) list (* zero or more *)) option
  * Token.t (* "," *) option
  * Token.t (* "}" *)
)

and pair = [
    `Str_COLON_value of (string_ * Token.t (* ":" *) * value)
  | `Semg_ellips of Token.t (* "..." *)
]

and value = [
    `Choice_obj of [
        `Obj of object_
      | `Array of array_
      | `Num of number (*tok*)
      | `Str of string_
      | `True of Token.t (* "true" *)
      | `False of Token.t (* "false" *)
      | `Null of Token.t (* "null" *)
    ]
  | `Semg_ellips of Token.t (* "..." *)
  | `Deep_ellips of (Token.t (* "<..." *) * value * Token.t (* "...>" *))
]

type document = [
    `Rep_value of value list (* zero or more *)
  | `Pair_opt_COMMA of (pair * Token.t (* "," *) option)
]

type false_ (* inlined *) = Token.t (* "false" *)

type semgrep_ellipsis (* inlined *) = Token.t (* "..." *)

type comment (* inlined *) = Token.t

type true_ (* inlined *) = Token.t (* "true" *)

type null (* inlined *) = Token.t (* "null" *)

type deep_ellipsis (* inlined *) = (
    Token.t (* "<..." *) * value * Token.t (* "...>" *)
)

type extra = [ `Comment of Loc.t * comment ]

type extras = extra list
